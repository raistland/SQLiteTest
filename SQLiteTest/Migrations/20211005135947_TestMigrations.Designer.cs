// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLiteTest;

namespace SQLiteTest.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211005135947_TestMigrations")]
    partial class TestMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("SQLiteTest.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SelectedTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsTrue = false,
                            QuestionID = 1,
                            SelectedTime = 1,
                            Text = "Cevap 1"
                        },
                        new
                        {
                            Id = 2,
                            IsTrue = false,
                            QuestionID = 1,
                            SelectedTime = 0,
                            Text = "Cevap 2"
                        },
                        new
                        {
                            Id = 3,
                            IsTrue = true,
                            QuestionID = 1,
                            SelectedTime = 0,
                            Text = "Cevap 3"
                        });
                });

            modelBuilder.Entity("SQLiteTest.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Text = "Soru 1"
                        },
                        new
                        {
                            Id = 2,
                            Text = "Soru 2"
                        });
                });

            modelBuilder.Entity("SQLiteTest.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "ca071103-e161-4f99-b122-f87519c5244e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb0c90e9-6c91-4c19-a243-8c82b3abf429",
                            EmailConfirmed = false,
                            IsAdmin = true,
                            LockoutEnabled = false,
                            Name = "Admin User",
                            Password = "admin",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4d7f05e-cc85-496e-87d7-4ddd6588d9ea",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "d2e80ae9-7b80-4f10-b87e-2dcdc53a1dfc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "165be2ca-52b0-41c2-9533-c6a30797f1e6",
                            EmailConfirmed = false,
                            IsAdmin = false,
                            LockoutEnabled = false,
                            Name = "End User 1",
                            Password = "enduser1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7cdd419-4ce4-4170-86b0-6bfd2e5194b7",
                            TwoFactorEnabled = false,
                            UserName = "enduser"
                        });
                });

            modelBuilder.Entity("SQLiteTest.Models.UserAnswers", b =>
                {
                    b.Property<int>("AnswerID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswerID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("SQLiteTest.Models.Answer", b =>
                {
                    b.HasOne("SQLiteTest.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SQLiteTest.Models.UserAnswers", b =>
                {
                    b.HasOne("SQLiteTest.Models.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLiteTest.Models.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SQLiteTest.Models.Answer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("SQLiteTest.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SQLiteTest.Models.User", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
